{"version":3,"sources":["logo.svg","colorbox.js","randomColors.js","userInterface.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Wrapper","styled","div","Grid","Row","Column","color","ColorBox","state","clicked","toggleClass","bind","wrapperFunction","event","currentState","this","setState","id","props","colorArray","Component","defaultProps","homepageLink","urls","SelectionBox","Button","button","RandomColors","getRandColorArray","colorArr","i","push","getRandColor","console","log","answer","hidden","box","setAnswer","printTester","show","getColorBox","waitBox","showBox","Math","floor","random","callBack","currentTarget","value","nextProps","nextState","onClick","e","callback","divs","setTimeout","wait","UI","getGame","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7622215c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\n\n\n\n\n\nconst Wrapper = styled.div`\n  /* margin-top:30vw; */\n  display:flex;\n  color: white;\n  background-color: orange;\n  /* height: 100vh; */\n  /* width: 100%; */\n  /* top: 0vw; */\n  align-items: center;\n  align-content: center;\n  /* margin-top: auto;\n  margin-bottom: auto; */\n  justify-content: center;\n  height: 40rem;\n  width: 40rem;\n`;\n\nconst Grid = styled.div`\n    /* display: block; */\n    /* padding-left: 20vw; */\n    /* padding-right: auto; */\n    /* display:flex; */\n    /* align-items: column; */\n    /* align-content: column; */\n    /* justify-content: center;  */\n`;\n\nconst Row = styled.div`\n    /* padding: auto; */\n    display: table;\n    /* width: 100%; Optional */\n    /* table-layout: fixed; Optional */\n    border-spacing: 10px; Optional\n`;\n\nconst Column = styled.div`\n    display: table-cell;\n    background-color: ${({ color }) => color} ; /*Optional*/\n    height: 10rem;\n    width: 10rem;\n    :hover{\n        background-color: #f57542; \n    }\n    :active{\n        background-color: #32a852; \n    }\n    /* #firsts{\n        background-color: #32a852; \n    } */\n\n`;\n\n\n\nclass ColorBox extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      clicked: null\n    };\n    this.toggleClass = this.toggleClass.bind(this);\n    this.wrapperFunction = this.toggleClass.bind(this);\n  }\n\n  toggleClass(event) {\n    const currentState = this.state.clicked;\n    this.setState({ clicked: !currentState });\n  }\n\n//   wrapperFunction = () => {\n//     toggleClass();\n//   };\n\n  render() {\n    return (\n      <Wrapper>\n          <Grid>\n            <Row>\n                <Column id= \"firsts\" color= {this.props.colorArray[0]}> 1 </Column>\n                <Column color= {this.props.colorArray[1]} > 2 </Column>\n                <Column color= {this.props.colorArray[2]}> 3 </Column>\n            </Row>\n            <Row>\n                <Column color= {this.props.colorArray[3]}> 1 </Column>\n                <Column color= {this.props.colorArray[4]}> 2 </Column>\n                <Column color= {this.props.colorArray[5]}> 3 </Column>\n            </Row>\n            <Row>\n                <Column color= {this.props.colorArray[6]}> 1 </Column>\n                <Column color= {this.props.colorArray[7]}> 2 </Column>\n                <Column color= {this.props.colorArray[8]}> 3 </Column>\n            </Row>\n          </Grid>\n      </Wrapper>\n    );\n  }\n}\nColorBox.defaultProps = {\n  color: \"blue\",\n  homepageLink: \"https://www.columbiaspectator.com/\",\n\n  urls: [\n    \"https://www.columbiaspectator.com/\",\n    \"https://www.columbiaspectator.com/\",\n    \"https://www.columbiaspectator.com/\",\n    \"https://www.columbiaspectator.com/\"\n  ]\n};\nexport default ColorBox;","import React, { Component } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport ColorBox from \"./colorbox\";\n\n\n\n\n\nconst Wrapper = styled.div`\n  color: white;\n  background-color: pink;\n  height: 100vh;\n  width: 100%;\n  /* top: 0vw; */\n  display:flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst SelectionBox = styled.div`\n  margin-left: 10vw\n  background-color: purple;\n  width: 30vw;\n  height: 100%;\n\n  display: flex;\n\n  /* top: 0vw; */\n  /* display:flex; */\n  justify-content: space-evenly;\n  align-items: center;\n`;\n\nconst Button = styled.button`\n  height: 5vh;\n  width: 10vw; \n`;\n\nconst RedBox = styled.div`\n  top:0;\n  left:0;\n  background-color: red;\n  width: 30vw;\n  height: 100%;\n\n`;\n\n\n\n\nlet colorArray = []\n\n\n\nclass RandomColors extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      clicked: null,\n      answer: null,\n      hidden: \"hidden\",\n      box: \"start\"\n    };\n    this.toggleClass = this.toggleClass.bind(this);\n    this.wrapperFunction = this.toggleClass.bind(this);\n    this.getRandColor = this.getRandColor.bind(this);\n    this.getRandColorArray = this.getRandColorArray.bind(this);\n    this.setAnswer = this.setAnswer.bind(this);\n    this.printTester = this.printTester.bind(this);\n    this.show = this.show.bind(this);\n    this.getColorBox= this.getColorBox.bind(this);\n    this.waitBox= this.waitBox.bind(this);\n    this.showBox= this.showBox.bind(this);\n  }\n\n  toggleClass(event) {\n    const currentState = this.state.clicked;\n    this.setState({ clicked: !currentState });\n  }\n\n  getRandColor(){\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    console.log(color)\n    return color;\n  }\n  getRandColorArray= () =>{\n    // this.getRandColor();\n    var colorArr = [];\n    for (var i = 0; i < 9; i++) {\n        colorArr.push(this.getRandColor());\n      }\n    console.log(colorArr)\n    colorArray= colorArr;\n  }\n\n  setAnswer(event, callBack){\n    // console.log(event)\n    // console.log(callBack) // to use this we need the callback parameter but usually we don't need a callback paramenter to make a callback\n    this.setState({ answer: event.currentTarget.value },\n    function () {this.printTester()});\n    // event.preventDefault();\n  }\n\n  printTester(){\n    console.log(this.state.answer)\n  }\n\n//   condition of when to reload the page and thus update all the colors in the app\n  shouldComponentUpdate(nextProps, nextState) { \n    console.log(\"NEXT STATE ANSWER: \" , nextState.answer , nextState.box, (nextState.box == \"start\" || nextState.answer != null))\n    console.log( (nextState.box == \"start\" ))\n    if (nextState.box == \"start\" ){\n      return true\n    }\n    else if (nextState.box == \"choose\" || this.state.box == \"choose\") { // || nextState.answer == null   // in it's current state, this condition ins never true because the value is either true or false (the background is )\n    // this.setState({box : \"start\"});\n    return false;\n    }\n    console.log(\"this is evaluating TRUE RIGHT NOW\")\n    this.setState({box : \"choose\"});\n    return true;\n  }\n\n  // componentWillMount(){\n  //   console.log(this.props.wait);\n  //   setTimeout(this.show(), \n  //              this.props.wait);\n  // }\n\n  show() {\n    this.setState({hidden : \"\"});\n  }\n\n  componentDidMount() {\n    // setTimeout(function(){ alert(\"After 5 seconds!\"); }, \n    //            this.props.wait);\n    // setTimeout(this.getColorBox(), \n    //            this.props.wait);\n\n  }\n\n\n  getColorBox(){\n    console.log(\"now it loads\")\n    \n    return(\n      <Wrapper >\n          {this.getRandColorArray()}\n          \n          <ColorBox colorArray = {colorArray}> </ColorBox>\n          <SelectionBox>\n\n              <Button value= \"yes\" onClick= {(e,callBack) => this.setAnswer(e,this.printTester)}>Yes</Button>\n              <Button value= \"no\">No</Button>\n\n            \n\n          </SelectionBox>\n      </Wrapper>\n\n    );\n  }\n  waitBox(callback){\n    // return setTimeout(function() {this.getColorBox(); callback()}, this.props.wait);\n    console.log(callback)\n    var divs = this.getColorBox();\n    console.log(\"divs: \" ,divs)\n    return setTimeout(() => {\n      this.setState({box: divs}, function () {console.log(this.state.box)})    ;}    ,\n      // function() {\n      // // console.log(this.getColorBox);\n      // // var divs = this.getColorBox;\n      // console.log(divs);\n      // callback(divs); }, \n      this.props.wait);\n\n    // this.getColorBox();\n    // console.log(\"something\")\n    // return(\n    //   this.getColorBox()\n    // )\n\n    // return callback(divs)\n    \n  };\n  // waitBox(function(currentTime) {\n  //   console.log('The current time is: ' + currentTime);\n  // });\n\n  showBox(divs){\n    console.log(\"we made it to this point\")\n    console.log(divs)\n    return divs\n      \n  }\n\n\n\n\n//onClick= {this.getRandColor}\n  render() {\n    return (\n      <Wrapper>\n        {/* <RedBox/> */}\n        {/* {this.getColorBox()} */}\n        {/* {this.waitBox()} */}\n        {this.waitBox(this.showBox   )}\n        {this.state.box}\n        {/* {this.getColorBox()} */}\n        {/* <RedBox/> */}\n\n      </Wrapper>\n    );\n  }\n}\nColorBox.defaultProps = {\n  color: \"blue\",\n  homepageLink: \"https://www.columbiaspectator.com/\",\n\n  urls: [\n    \"https://www.columbiaspectator.com/\",\n    \"https://www.columbiaspectator.com/\",\n    \"https://www.columbiaspectator.com/\",\n    \"https://www.columbiaspectator.com/\"\n  ]\n};\nexport default RandomColors;","import React, { Component } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport RandomColors from \"./randomColors\";\n\n\n\n\n\n\nconst Wrapper = styled.div`\n  color: white;\n  /* background-color: pink; */\n  height: 100vh;\n  width: 100%;\n  /* top: 0vw; */\n  display:flex;\n  justify-content: center;\n  align-items: center;\n`;\n\n\n\n\n\n\n\n\n// const SidebarContent = props => {\n//     return (\n//       <div>\n//           <RandomColors/>\n//       </div>\n//     );\n//   };\n\n\n\n\n\n\n\n\n\nclass UI extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      clicked: null,\n      answer: \"something\"\n    };\n    this.toggleClass = this.toggleClass.bind(this);\n    this.wrapperFunction = this.toggleClass.bind(this);\n    this.setAnswer = this.setAnswer.bind(this);\n    this.printTester = this.printTester.bind(this);\n    this.getGame = this.getGame.bind(this);\n  }\n\n  toggleClass(event) {\n    const currentState = this.state.clicked;\n    this.setState({ clicked: !currentState });\n  }\n\n\n\n  setAnswer(event, callBack){\n    // console.log(event)\n    // console.log(callBack) // to use this we need the callback parameter but usually we don't need a callback paramenter to make a callback\n    this.setState({ answer: event.currentTarget.value },\n    function () {this.printTester()});\n    // event.preventDefault();\n  }\n\n  printTester(){\n    console.log(this.state.answer)\n  }\n\n//   condition of when to reload the page and thus update all the colors in the app\n  shouldComponentUpdate(nextProps, nextState) { \n    if (nextState.answer !== 0) { // in it's current state, this condition ins never true because the value is either true or false (the background is )\n      return false;\n    }\n    return true;\n  }\n\n\n  componentDidMount() {\n    // // Typical usage (don't forget to compare props):\n    // if (this.props.userID !== prevProps.userID) {\n    //   this.fetchData(this.props.userID);\n    // }\n    // setTimeout(function(){ alert(\"After 5 seconds!\"); }, 5000);\n    // setTimeout(this.getGame, 5000);\n  }\n\n\n\n\n  getGame () {\n    return (\n      <div>\n          <RandomColors wait= {5000}/>\n      </div>\n    );\n  };\n\n\n\n\n//onClick= {this.getRandColor}\n  render() {\n    return (\n      <Wrapper >\n          {this.getGame()}\n\n          {/* <RandomColors/> */}\n\n      </Wrapper>\n    );\n  }\n}\nUI.defaultProps = {\n  color: \"blue\",\n  homepageLink: \"https://www.columbiaspectator.com/\",\n\n  urls: [\n    \"https://www.columbiaspectator.com/\",\n    \"https://www.columbiaspectator.com/\",\n    \"https://www.columbiaspectator.com/\",\n    \"https://www.columbiaspectator.com/\"\n  ]\n};\nexport default UI;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ColorBox from './colorbox';\nimport RandomColors from './randomColors';\nimport UI from './userInterface';\n\n\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* {getRandColor()} */}\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      {/* <RandomColors/> */}\n      <UI/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}